{
  "root": true,
  "ignorePatterns": [
    "projects/**/*"
  ],
  "settings": {
    "import/resolver": {
      "typescript": {} // this loads <rootdir>/tsconfig.js to eslint
    }
  },
  "overrides": [
    {
      "files": [
        "*.ts"
      ],
      "parserOptions": {
        "project": [
          "tsconfig.json"
        ],
        "createDefaultProgram": true
      },
      "plugins": ["deprecation", "rxjs-angular"],
      "extends": [
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates",
        "plugin:import/recommended",
        "plugin:import/typescript",
        "plugin:prettier/recommended",
        "plugin:rxjs/recommended"
      ],
      "rules": {
        "@angular-eslint/directive-selector": [
          "off",
          {
            "type": "attribute",
            "prefix": "app",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/component-selector": [
          "off",
          {
            "type": "element",
            "prefix": "app",
            "style": "kebab-case"
          }
        ],
        "@typescript-eslint/no-unused-vars": [
          "warn",
          { "vars": "all", "args": "none" }
        ],
        "deprecation/deprecation": "warn", // or "error" to have stricter rule
        "no-restricted-imports": ["error", {
          "paths": [
            "lodash",
            "ngx-bootstrap",
            "rxjs/Rx"
          ]
        }],
        "sort-imports": ["error", { "ignoreDeclarationSort":  true }],
        "import/order": ["error", {
          "groups": [
            ["builtin"],
            ["external"],
            ["internal", "parent", "sibling"]
          ],
          "pathGroups": [
          {
            "pattern": "@angular/**",
            "group": "builtin"
           }
          ],
          "pathGroupsExcludedImportTypes": ["@angular/**"],
          "newlines-between": "always",
          "alphabetize": {
            "order": "asc",
            "caseInsensitive": true
          }
        }],
        "import/no-unresolved": ["error"],
        "rxjs/prefer-observer": ["error"],
        "rxjs/finnish": ["error", {
          "methods": false
        }],
        "rxjs/no-unsafe-takeuntil": [
          "error",
          {
            "alias": ["untilDestroyed"]
          }
        ],
        "rxjs-angular/prefer-takeuntil": ["error", {
          "alias":  ["untilDestroyed"]
        }]
      }
    },
    // NOTE: WE ARE NOT APPLYING PRETTIER IN THIS OVERRIDE, ONLY @ANGULAR-ESLINT/TEMPLATE
    {
      "files": [
        "*.html"
      ],
      "extends": [
        "plugin:@angular-eslint/template/recommended"
      ],
      "rules": {}
    },
    // NOTE: WE ARE NOT APPLYING @ANGULAR-ESLINT/TEMPLATE IN THIS OVERRIDE, ONLY PRETTIER
    {
      "files": [
        "*.html"
      ],
      "excludedFiles": ["*inline-template-*.component.html"],
      "extends": [
        "plugin:prettier/recommended"
      ],
      "rules": {
        // NOTE: WE ARE OVERRIDING THE DEFAULT CONFIG TO ALWAYS SET THE PARSER TO ANGULAR (SEE BELOW)
        "prettier/prettier": ["error", { "parser": "angular" }]
      }
    }
  ]
}
